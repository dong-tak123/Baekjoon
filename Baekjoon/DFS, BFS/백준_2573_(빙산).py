# -*- coding: utf-8 -*-
"""백준 2573 (빙산)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18mtiduEUwCvSh5LudsYKK8LAv8jDFKRe

주변의 0의 갯수만큼 녹는다..

빙산이 두 덩어리 이상으로 분리되는 최초의 시간을 출력
"""

from collections import deque

def melt(arr):
    arr_re = [[0]*col for _ in range(row)]
    for i in range(row):
        for j in range(col):
            if arr[i][j] != 0:
                cnt = 0
                for p in range(4):
                    ni = i + dx[p]
                    nj = j + dy[p]
                    if (0<=ni<row) and (0<=nj<col) and (arr[ni][nj] == 0):
                        cnt += 1
                arr_re[i][j] = arr[i][j]-cnt if arr[i][j]-cnt > 0 else 0
    return arr_re

def check():
    cnt = 0
    visited= [[False]*col for _ in range(row)]
    for i in range(row):
        for j in range(col):
            if (sea[i][j] != 0) and not visited[i][j]:
                bfs(i, j, visited)
                cnt += 1
    return cnt

def bfs(x, y, visited):
    q = deque()
    q.append([x, y])
    visited[x][y] = True
    while q:
        tx, ty = q.popleft()
        for k in range(4):
            nx = tx + dx[k]
            ny = ty + dy[k]
            if (0<=nx<row) and (0<=ny<col) and not visited[nx][ny] and sea[nx][ny] != 0:
                visited[nx][ny] = True
                q.append([nx, ny])


row, col = map(int, input().split())

sea = [list(map(int, input().split())) for _ in range(row)]
dx = [1, -1, 0, 0]
dy = [0, 0, 1, -1]

t = 0
while True:
    t += 1
    sea = melt(sea)
    if check() > 1:       #빙산이 몇개있는지 반환해주면 됨
        print(t)
        break
    elif check() == 0:
        print(0)
        break