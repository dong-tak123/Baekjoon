# -*- coding: utf-8 -*-
"""백준 11404 (플로이드)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dTJFRljwMFFVUv82fGffYakq62GZ5cpd

#플로이드 와샬

점화식 : $D_{(i,j)} = min(D_{(i,j)},  D_{(i,k)} + D_{(k,j)})$

-> 시간 복잡도 $O(n^3)$
"""

from math import inf

n = int(input())
m = int(input())

#최단거리를 구해야 하니까 큰값으로 초기화
graph = [[inf] * (n+1) for _ in range(n+1)]

for _ in range(m):
    start, dest, weight = map(int, input().split())
    #가중치 초기화 자체를 최솟값으로 해야 한다
    if weight < graph[start][dest]:
        graph[start][dest] = weight

for k in range(1, n+1):
    graph[k][k] = 0
    for i in range(1, n+1):
        for j in range(1, n+1):
            #k를 거쳐서 가는게 더 짧으면 갱신하자!
            graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j])

for i in range(1, n+1):
    for j in range(1, n+1):
        if graph[i][j] == inf:
            print(0, end=' ')
        else:
            print(graph[i][j], end=' ')
    print()