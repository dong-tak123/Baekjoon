# -*- coding: utf-8 -*-
"""백준 6593 (상범 빌딩)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U9OX3CW5UrIiv6dxLHt2U8ZWuryPA9t9

#입력의 각 층 사이에 공백이 있다..
"""

from collections import deque

def bfs(sh, sx, sy, gh, gx, gy):
    flag = False
    q = deque()
    q.append([sh, sx, sy])
    
    while q:
        th, tx, ty = q.popleft()
        if (th == gh) and (tx == gx) and (ty == gy):
            flag = True
            break
        for p in range(6):
            nh = th + dh[p]
            nx = tx + dx[p]
            ny = ty + dy[p]
            if (0 <= nh < h) and (0<= nx < m) and (0 <= ny < n) and ((graph[nh][nx][ny] == '.') or (graph[nh][nx][ny] == 'E')):
                if (path[nh][nx][ny] == 0):
                    q.append([nh, nx, ny])
                    path[nh][nx][ny] = path[th][tx][ty] + 1

    if flag:
        print(f"Escaped in {path[gh][gx][gy]} minute(s).")
    else:
        print("Trapped!")

dh = [1, -1, 0, 0, 0, 0]
dx = [0, 0, 1, -1, 0, 0]
dy = [0, 0, 0, 0, 1, -1]

while True:
    #h : pages, m : row, n : col
    h, m, n= map(int, input().split())
    if h == 0:
        break
    
    graph = []
    path = [[[0]*n for _ in range(m)] for _ in range(h)]
    for _ in range(h):
        layer = []
        for _ in range(m):
            layer.append(list(map(str, input())))
        input()     #입력 사이에 있는 한줄을 체크 안해줌..
        graph.append(layer)

    for k in range(h):
        for i in range(m):
            for j in range(n):
                if graph[k][i][j] == 'S':
                    sh, sx, sy = k, i, j
                elif graph[k][i][j] == 'E':
                    gh, gx, gy = k, i, j

    bfs(sh, sx, sy, gh, gx, gy)