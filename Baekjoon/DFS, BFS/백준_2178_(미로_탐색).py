# -*- coding: utf-8 -*-
"""백준 2178 (미로 탐색)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mi6BCJviyVWaPwAwsw_mfmoVYwRCdN12

지나야하는 최소 칸 수를 출력

#dfs로 하면 깊이우선이기 때문에 최소 칸 수를 출력할 수 없음

예제 4 가 반례.. 13인데 15가 나옴
"""

from collections import deque
def dfs(x, y, gx, gy):
    dx = [0, 1, -1, 0]
    dy = [1, 0, 0, -1]
    if (x == gx-1) and (y == gy-1):
        print(dist[x][y])
        return

    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]
        if (0 <= nx < goal_x) and (0 <= ny < goal_y):
            if (dist[nx][ny] == 0) and (maze[nx][ny] == 1):
                dist[nx][ny] = dist[x][y] + 1
                dfs(nx, ny, gx, gy)

#goal_x : row , goal_y : col
goal_x, goal_y = map(int, input().split())

#미로
maze = []
for _ in range(goal_x):
    maze.append(list(map(int, input())))

#거리재는 용도
dist = [[0]*goal_y for _ in range(goal_x)]
dist[0][0] = 1

dfs(0, 0, goal_x, goal_y)

"""#bfs로 구현"""

from collections import deque
def bfs(x, y, gx, gy):
    queue = deque()
    queue.append([x, y])
    dx = [0, 1, -1, 0]
    dy = [1, 0, 0, -1]
    while queue:
        tx, ty = queue.popleft()
        if (tx == gx-1) and (ty == gy-1):
            print(dist[tx][ty])
            return

        for i in range(4):
            nx = tx + dx[i]
            ny = ty + dy[i]
            if (0 <= nx < goal_x) and (0 <= ny < goal_y):
                if (maze[nx][ny] == 1) and (dist[nx][ny] == 0):
                    dist[nx][ny] = dist[tx][ty] + 1
                    queue.append([nx, ny])
                
goal_x, goal_y = map(int, input().split())

#미로
maze = []
for _ in range(goal_x):
    maze.append(list(map(int, input())))

#거리재는 용도
dist = [[0]*goal_y for _ in range(goal_x)]
dist[0][0] = 1

bfs(0, 0, goal_x, goal_y)