# -*- coding: utf-8 -*-
"""백준 11724 (연결 요소의 갯수)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17HZm8IsXoxIt4BPBxWevhAHw1p7ePapu

#DFS
"""

"""
import sys
sys.setrecursionlimit(100000)
input = sys.stdin.readline
"""

n, m = map(int, input().split())

cnt = 0

graph = [[] for _ in range(n+1)]
visited = [False] * (n+1)

for _ in range(m):
    i, j = map(int, input().split())
    
    #그래프 완성
    graph[i].append(j)
    if i not in graph[j]:
        graph[j].append(i)

def dfs(graph, start, visited):
    visited[start] = True
    for u in graph[start]:
        if visited[u] == False:
            dfs(graph, u, visited)

for i in range(1, len(visited)):
    if visited[i] == False:
        cnt += 1
        dfs(graph, i, visited)

print(cnt)

"""#BFS"""

from collections import deque

n, m = map(int, input().split())

graph = [[] for _ in range(n+1)]
visited = [False] * (n+1)

for _ in range(m):
    i, j = map(int, input().split())
    #그래프 완성
    graph[i].append(j)
    if i not in graph[j]:
        graph[j].append(i)

def bfs(graph, start, visited):
    queue = deque()
    queue.append(start)
    while queue:
        rear = queue.popleft()
        for u in graph[rear]:
            if not visited[u]:
                visited[u] = True
                queue.append(u)
cnt = 0
for i in range(1, len(visited)):
    if visited[i] == False:
        bfs(graph, i, visited)
        cnt += 1

print(cnt)